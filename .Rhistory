y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val
)
}
p <- add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = data[["deriv_trend"]]
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
color =
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
color =
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
color = trend_colors[[unique(data[trend_seg==trend_val, deriv_trend])]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val
line=list(color=color)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
color = trend_colors[[unique(data[trend_seg==trend_val, deriv_trend])]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val,
line=list(color=color)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
color = trend_colors[[unique(data[trend_seg==trend_val, deriv_trend])]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
trend_name = unique(data[trend_seg==trend_val, deriv_trend])
color = trend_colors[[trend_name]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_val,
legendgroup = trend_name,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
gginput
gginput[, .I, by=deriv_trend]
gginput[, .I[1], by=deriv_trend]
gginput[, .I[1], by=deriv_trend]$V1
gginput[gginput[, .I[1], by=deriv_trend]$V1,trend_seg]
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
legend_on = data[data[, .I[1], by=deriv_trend]$V1,trend_seg]
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
trend_name = unique(data[trend_seg==trend_val, deriv_trend])
color = trend_colors[[trend_name]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_name,
legendgroup = trend_name,
show_legend = trend_val %in% legend_on,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
legend_on = data[data[, .I[1], by=deriv_trend]$V1,trend_seg]
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
trend_name = unique(data[trend_seg==trend_val, deriv_trend])
color = trend_colors[[trend_name]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_name,
legendgroup = trend_name,
showlegend = trend_val %in% legend_on,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
library(shiny)
library(tidyverse)
library(data.table)
library(DT)
#load hotspot utils
source("www/hotspot_functions.R")
getzips <- function(county_name,zips) {
zips_for_this_county <- unique(zips[county==county_name, zname])
return(zips_for_this_county)
}
get_data_subset <- function(inputs,df) {
res <- copy(df)
if(length(inputs$county)==1 && inputs$county=="All Counties") {
res = res[,lapply(.SD,sum, na.rm=T), by=c("Date"), .SDcols=c("Population", "cumConfirmed", "Confirmed")]
res[,zname:="All Zip Codes"]
return(res)
}
else {
if(is.null(inputs$zip)) inputs$zip="All Zip Codes"
res = res[county %in% inputs$county]
if(inputs$zip[1] != "All Zip Codes") {
res = res[zname %in% inputs$zip]
res = res[,lapply(.SD,sum, na.rm=T), by=c("zname", "Date"), .SDcols=c("Population", "cumConfirmed", "Confirmed")]
} else {
res = res[,lapply(.SD,sum, na.rm=T), by=c("Date"), .SDcols=c("Population", "cumConfirmed", "Confirmed")]
res[,zname:="All Zip Codes"]
}
return(res)
#} else {
#  res=res[zname %in% inputs$zip]
#  return(res)
#}
}
}
get_locale_data <- function(inputs,df) {
res <- get_data_subset(inputs, df)
if(nrow(res)<=0) return(NULL)
if(inputs[["dist"]] == "poisson") {
chosen_dist = cubic_spline_poisson
} else {
chosen_dist = cubic_spline_normal
}
#get smoothing data:
res <- get_smoothing_vars(
res,
raw_col = "Confirmed",
smooth_alg = chosen_dist,
knot_interval = inputs$knot_interval,
geo_level="zname")
#get derivative trend
res[,deriv_trend:=derivative_trend_category(fderiv,sderiv, outcome = "Cases")]
#get the hotspot status and retain indicators
res_hs <- get_hotspots(res,
target_column="Smoothed",
retain_indicators = T,
cumul_inc_threshold = inputs[["dailyinc"]]*7,
abs_cases_threshold = inputs[["abscases7"]]*7,
other_keep_vars = c("zname","Smoothed","Confirmed","deriv_trend","Population","fderiv"))
res_hs[fderiv>0,hotspot:=TRUE]
return(res_hs)
}
get_plot <- function(ginput, outcome, burdenline, burdenvalues=NULL, trans="identity", freey=T) {
outcomename="Cases"
if(outcome=="Rate") {
outcomename="Rate (per 100 K)"
outcome="Confirmed"
ginput[,`:=`(Smoothed=Smoothed*100000/Population, Confirmed=Confirmed*100000/Population)]
ginput[,deriv_trend:=stringr::str_replace(deriv_trend,"Cases","Rate (per 100 K)")]
if(burdenline) {
ginput[fderiv>0 & Smoothed>burdenvalues[1],hotspot:=T]
ginput[fderiv<=0 | Smoothed<=burdenvalues[1],hotspot:=F]
}
} else {
burdenline=F
}
scale_values = c("red", "orange","green")
names(scale_values) <- c(paste0(outcomename, " Increasing (Accelerating)"),
paste0(outcomename, " Increasing (Decelerating)"),
paste0(outcomename, " Decreasing"))
if(is.null(ginput)) return(NULL)
trans = dplyr::case_when(
trans %in% c("Normal","identity")~"identity",
trans=="Square Root"~"sqrt",
trans=="Log"~"log"
)
#what daily number of cases req'd for 7 day cumul inc > 100/100K?
#its Population, divided by ~7000
yaxisbreaks = round(c(pretty(ginput[[outcome]]),0))
custom_caption="Source: Maryland Department of Health"
if(burdenline) {
inc_cutoff = unique(ginput$Population)*burdenvalues[1]/100000
case_cutoff = burdenvalues[2]
ylinevalue <- min(inc_cutoff, case_cutoff)
yaxisbreaks = round(c(yaxisbreaks, ylinevalue),0)
custom_caption=paste0("Horizontal line drawn at ",burdenvalues[1]," per 100,000)")
}
ginput <- ginput[,hotspot:=factor(hotspot)]
ginput <- ginput[!is.na(hotspot) & Date>="2020-03-01" & get(outcome)>=0]
plt <- ggplot(ginput) +
geom_point(aes(x=Date, y=!!ensym(outcome)),fill="black", shape=21, size=2) +
geom_path(aes(x=Date, y=Smoothed, color=deriv_trend, group=1), size=1.3) +
facet_wrap(~zname, scales=ifelse(freey,'free_y','fixed')) +
scale_color_manual(values=scale_values) +
scale_y_continuous(trans=trans, breaks=yaxisbreaks) +
ylab(outcomename) +
labs(fill="Hotspot Status", color="Trend", caption=custom_caption) +
theme(legend.position="bottom", legend.background = element_blank(), legend.text = element_text(size = 8),
legend.box="vertical" )
#if(burdenline) plt <- plt + geom_hline(aes(yintercept=ylinevalue),size=1.3)
if(outcomename=="Rate (per 100 K)") {
plt <- plt + geom_hline(aes(yintercept=20),size=1.3)
}
plt <- plt + guides(fill = guide_legend(order=1),color = guide_legend(order=2))
return(plt)
}
prepare_table <- function(srcdata, outcome) {
newnames <- c("Date","Hotspot","Zip Code","Smoothed Cases", "Confirmed Cases", "Deriv Trend","Population","First Deriv",
"Cases in Prior Wk>50","Trend","Conf Cases Prior Wk", "Daily Cases per 100K","Cumul Inc Prior Wk")
if(outcome=="Deaths") {
newnames <- str_replace_all(newnames,"Cases","Deaths")
}
res <- tibble(copy(srcdata))
res <- res %>%  rename_with(~newnames) %>% select(3,1,5,4,6,9,11,12,13) %>%
#round any numeric variables to two digits
mutate_if(.predicate = is.numeric, round, digits=2) %>%
#arrange by date (most recent date first)
arrange(desc(Date))
return(res)
}
library(plotly)
inputs = list(county = "Baltimore County", "zip" = NULL, outcome="Confirmed", knot_interval = 21, dist="poisson")
gginput <- get_locale_data(inputs, df)[]
source("www/pull_county_data.R",chdir=T)
setnames(df,old=c("pop","date","cases","daily"),new=c("Population","Date","cumConfirmed","Confirmed"))
#get unique states and counties
counties <- unique(zipcodenames[,county])
updateSelectizeInput(session,"countyselect", choices= c("All Counties",counties),selected="Baltimore County")
zips = df[,.SD[1], by=zname][,.(zname,zip,name,county)]
gginput <- get_locale_data(inputs, df)[]
gginput[, trend_seg:=rleid(deriv_trend)]
plot_trend_markers <- function(data, trend_var) {
trend_vals = unique(data[[trend_var]])
p <- plot_ly(type="scatter",mode="markers") %>%
add_trace(data=data[get(trend_var)==trend_vals[1]], x=~Date, y=~Smoothed, mode="markers", name=trend_vals[1], marker=list(color="red")) %>%
add_trace(data=data[get(trend_var)==trend_vals[2]], x=~Date, y=~Smoothed, mode="markers", name=trend_vals[2], marker=list(color="orange")) %>%
add_trace(data=data[get(trend_var)==trend_vals[3]], x=~Date, y=~Smoothed, mode="markers", name=trend_vals[3], marker=list(color="green")) %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_markers(gginput, "deriv_trend")
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
legend_on = data[data[, .I[1], by=deriv_trend]$V1,trend_seg]
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
trend_name = unique(data[trend_seg==trend_val, deriv_trend])
color = trend_colors[[trend_name]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_name,
legendgroup = trend_name,
showlegend = trend_val %in% legend_on,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_markers <- function(data, trend_var) {
trend_vals = unique(data[[trend_var]])
p <- plot_ly(type="scatter",mode="markers") %>%
add_trace(data=data[get(trend_var)==trend_vals[1]], x=~Date, y=~Smoothed, mode="markers", name=trend_vals[1], marker=list(color="red")) %>%
add_trace(data=data[get(trend_var)==trend_vals[2]], x=~Date, y=~Smoothed, mode="markers", name=trend_vals[2], marker=list(color="orange")) %>%
add_trace(data=data[get(trend_var)==trend_vals[3]], x=~Date, y=~Smoothed, mode="markers", name=trend_vals[3], marker=list(color="green")) %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_markers(gginput, "deriv_trend")
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
legend_on = data[data[, .I[1], by=deriv_trend]$V1,trend_seg]
#return(trend_colors)
p <- plot_ly()
for(trend_val in seq(1,data[,max(trend_seg)])) {
trend_name = unique(data[trend_seg==trend_val, deriv_trend])
color = trend_colors[[trend_name]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_name,
legendgroup = trend_name,
showlegend = trend_val %in% legend_on,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
legend_on = data[data[, .I[1], by=deriv_trend]$V1,trend_seg]
#return(trend_colors)
p <- plot_ly(type="scatter")
for(trend_val in seq(1,data[,max(trend_seg)])) {
trend_name = unique(data[trend_seg==trend_val, deriv_trend])
color = trend_colors[[trend_name]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_name,
legendgroup = trend_name,
showlegend = trend_val %in% legend_on,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
plot_trend_line <- function(data) {
trend_names = unique(data[["deriv_trend"]])
trend_colors = list("red","orange","green")
names(trend_colors) = trend_names
legend_on = data[data[, .I[1], by=deriv_trend]$V1,trend_seg]
#return(trend_colors)
p <- plot_ly(type="scatter", mode="lines")
for(trend_val in seq(1,data[,max(trend_seg)])) {
trend_name = unique(data[trend_seg==trend_val, deriv_trend])
color = trend_colors[[trend_name]]
p <- p %>%
add_trace(data=data[trend_seg==trend_val],
x=~Date,
y=~Smoothed,
mode="lines",
type="scatter",
name=trend_name,
legendgroup = trend_name,
showlegend = trend_val %in% legend_on,
line=list(color=color, width=4)
)
}
p <- p %>%
add_trace(data=data[Confirmed>=0], x=~Date, y=~Confirmed, name="Observed", mode="markers", marker=list(color="black")) %>%
layout(legend=list(orientation='h'))
return(p)
}
plot_trend_line(gginput)
